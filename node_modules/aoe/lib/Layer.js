'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by exolution on 17/6/14.
 */
var Layer = function () {
    function Layer(name) {
        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            canvas = _ref.canvas,
            position = _ref.position,
            dpr = _ref.dpr,
            z = _ref.z,
            _ref$container = _ref.container,
            container = _ref$container === undefined ? document.body : _ref$container;

        _classCallCheck(this, Layer);

        this.name = name;
        var newCreate = false;
        if (!canvas) {
            canvas = document.createElement('canvas');
            newCreate = true;
        } else {}
        if (!dpr || dpr > 2) {
            dpr = 1;
        }
        var width = position && position[2] || window.innerWidth,
            height = position && position[3] || window.innerHeight;
        this.width = canvas.width = width * dpr;
        this.height = canvas.height = height * dpr;
        canvas.style.width = width;
        canvas.style.height = height;
        if (z !== undefined) {
            canvas.style.zIndex = z;
        }
        canvas.style.position = 'absolute';
        if (position) {
            canvas.style.left = position[0] + 'px';
            canvas.style.top = position[1] + 'px';
        }
        if (newCreate) {
            container.appendChild(canvas);
        }
        this.startTime = 0;
        this.canvas = canvas;

        this.ctx = canvas.getContext('2d');
        this.gameObjectList = [];
        this._pause = false;
    }

    _createClass(Layer, [{
        key: 'pause',
        value: function pause() {
            this._pause = true;
        }
    }, {
        key: 'resume',
        value: function resume() {
            this._pause = false;
        }
    }, {
        key: 'setBackground',
        value: function setBackground(image) {
            var align = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

            if (typeof image === 'string') {
                this.canvas.style.backgroundImage = 'url(' + image + ')';
                this.canvas.style.backgroundSize = '100% auto';
                this.canvas.style.backgroundPosition = 'center ' + align;
                this.background = null;
            } else {
                this.background = image;
                this.backgroundAlign = align;
            }
        }
    }, {
        key: 'drawBackground',
        value: function drawBackground() {
            if (this.background) {
                var targetHeight = this.width / this.background.image.width * this.background.image.height;
                if (targetHeight >= this.height) {
                    this.ctx.drawImage(this.background.image, 0, this.backgroundAlign == 'bottom' ? this.background.image.height - this.background.image.width / this.width * this.height : 0, this.background.image.width, this.background.image.width / this.width * this.height, 0, 0, this.width, this.height);
                } else {
                    this.ctx.drawImage(this.background.image, (this.background.image.width - this.background.image.height / this.height * this.width) / 2, 0, this.background.image.height / this.height * this.width, this.background.image.height, 0, 0, this.width, this.height);
                }
            }
        }
    }, {
        key: 'render',
        value: function render(elapse) {
            var _this = this;

            if (!this._pause) {
                var interval = elapse - this.startTime;
                this.startTime = elapse;
                if (interval > 1000) {
                    interval = 16.7;
                }
                this.ctx.clearRect(0, 0, this.width, this.height);
                this.gameObjectList.sort(function (a, b) {
                    return a.z - b.z;
                }).forEach(function (go) {
                    go.render(_this.ctx, elapse, interval);
                });
                this.drawBackground();
            }
            /*glIntervalList.forEach(function (itv) {
             itv.testOrRun(elapse, interval)
             })*/
        }
    }]);

    return Layer;
}();

exports.default = Layer;