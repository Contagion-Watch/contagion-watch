/**
 * Created by exolution on 17/6/14.
 */
export default class Layer {
    constructor(name, {canvas,position,dpr,z,container=document.body}={}) {
        this.name = name
        let newCreate = false
        if (!canvas) {
            canvas = document.createElement('canvas')
            newCreate = true
        }
        else {

        }
        if (!dpr || dpr > 2) {
            dpr = 1
        }
        let width = position && position[2] || window.innerWidth,
            height = position && position[3] || window.innerHeight
        this.width = canvas.width = width * dpr
        this.height = canvas.height = height * dpr
        canvas.style.width = width
        canvas.style.height = height
        if (z !== undefined) {
            canvas.style.zIndex = z
        }
        canvas.style.position = 'absolute'
        if (position) {
            canvas.style.left = position[0] + 'px'
            canvas.style.top = position[1] + 'px'
        }
        if (newCreate) {
            container.appendChild(canvas)

        }
        this.startTime = 0
        this.canvas = canvas

        this.ctx = canvas.getContext('2d')
        this.gameObjectList = []
        this._pause = false
    }

    pause() {
        this._pause = true
    }

    resume() {
        this._pause = false
    }
    setBackground(image,align='top'){
        if(typeof image==='string') {
            this.canvas.style.backgroundImage = `url(${image})`
            this.canvas.style.backgroundSize = '100% auto';
            this.canvas.style.backgroundPosition = `center ${align}`;
            this.background=null
        }
        else{
            this.background=image
            this.backgroundAlign=align
        }
    }
    drawBackground(){
        if(this.background){
            let targetHeight=this.width/this.background.image.width*this.background.image.height
            if(targetHeight>=this.height){
                this.ctx.drawImage(
                    this.background.image,
                    0,
                    this.backgroundAlign=='bottom'?this.background.image.height-this.background.image.width/this.width*this.height:0 ,
                    this.background.image.width,
                    this.background.image.width/this.width*this.height,
                    0,0,this.width,this.height
                )
            }
            else{
                this.ctx.drawImage(
                    this.background.image,
                    (this.background.image.width-this.background.image.height/this.height*this.width)/2,
                    0,
                    this.background.image.height/this.height*this.width,
                    this.background.image.height,
                    0,0,this.width,this.height
                )

            }
        }
    }
    render(elapse) {
        if (!this._pause) {
            let interval = elapse - this.startTime
            this.startTime = elapse
            if (interval > 1000) {
                interval = 16.7
            }
            this.ctx.clearRect(0, 0, this.width, this.height)
            this.gameObjectList.sort((a, b)=>a.z - b.z).forEach( (go)=> {
                go.render(this.ctx, elapse, interval)
            })
            this.drawBackground()
        }
        /*glIntervalList.forEach(function (itv) {
         itv.testOrRun(elapse, interval)
         })*/
    }
}