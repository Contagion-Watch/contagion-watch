/**
 * Created by exolution on 17/6/14.
 */
export default class Resource{
    static load(src,name){
        let m=/\.([^.]+)$/.exec(src)
        let ext=m&&m[1]
        let type
        Resource.types.some((t)=>{
            if(t.regexp.test(ext)){
                type=t.type
                return true
            }
        })
        if(type) {
            Resource.resourceMap[name||src]=new Resource.classMap[type](src,name)
        }
        else{
            throw new Error('unsupported resource format "'+ext+'"')
        }
        return Resource.resourceMap[name||src]
    }
    static get(name){
        return Resource.resourceMap[name]
    }
    static init(onProgress){
        let resources=[]
        let complete=0
        let keys=Object.keys(Resource.resourceMap)
        let all=keys.length
        function progress(){
            onProgress(++complete,all)
        }
        return Promise.all(keys.map(key=>Resource.resourceMap[key].init(progress)))

    }
    constructor(src,name){
        return Resource.load(src,name)
    }
}
class ImageResource{
    constructor(src,name){
        this.src=src
        this.name=name
    }
    init(onProgress){
        this.image=new Image()
        this.image.src=this.src
        return new Promise((resolve,reject)=>{
            this.image.onload=function(){
                resolve()
                if(onProgress){
                    onProgress()
                }
            }
            this.image.onerror=function(){
                reject(this)
            }
        })

    }
}
Resource.types=[
    {regexp:/png|gif|jpe?g/,type:'image'}
]
Resource.resourceMap={}
Resource.classMap={
    image:ImageResource
}